# The network name.
network-name = "Network Name"
# The network icon.
network-icon = "https://static.wikia.nocookie.net/logopedia/images/a/ab/Minecraft_2009_icon.svg/revision/latest?cb=20240128230646"

# The server name.
server-name = "Server Name"
# The server identifier, the short form of the server name.
# Used to tie DB entries to a server.
server-identifier = ""
# The server icon.
server-icon = "https://static.wikia.nocookie.net/logopedia/images/a/ab/Minecraft_2009_icon.svg/revision/latest?cb=20240128230646"
# The terminal icon.
terminal-icon = "https://upload.wikimedia.org/wikipedia/commons/b/b3/Terminalicon2.png"
# The link to the store.
store-link = "https://example.com"

command {
  entity-zap {
    # The entity zap command will ask for confirmation if amount of entities to be discarded is
    # greater than this value. -1 will disable confirmation.
    confirm-above = 0

    # A list of entity identifiers to exclude from mass removals via entity zap.
    # They are not excluded when specifying a type using --type.
    mass-removal-exclusions = [
      # "minecraft:entity_identifier_1"
      # "minecraft:entity_identifier_2"
    ]

    # The max range used in the entity zap command.
    max-range = 500.0
  }

  # A list of text to be broadcast when someone pays their respect.
  # Supports MiniMessage.
  #
  # {sender_name} placeholder for the sender name
  # {player_name} placeholder for the player name
  pay-respect = [
    "{sender_name} plants a tree for {player_name}. Then chops it down for wood.",
    "{sender_name} buries {player_name}'s stuff in a chest. Well, most of it.",
    "{sender_name} builds {player_name} a tiny graveyard... with only two blocks of dirt.",
    "{sender_name} promises to avenge {player_name}... after finishing this build.",
    "{sender_name} renames their pet pig to ‘In Memory of {player_name}’.",
    "{sender_name} gives {player_name} the highest honor, a Minecraft sign with a typo.",
    "{sender_name} declares {player_name}'s death a conspiracy by the Endermen.",
    "{sender_name} builds a redstone contraption in {player_name}'s honor. It doesn’t work.",
    "{sender_name} blames {player_name}'s death on lag... and the admins agree.",
    "{sender_name} leaves a cake at {player_name}'s grave. It's missing a slice.",
    "{sender_name} places a bed in the Nether for {player_name}'s ultimate nap.",
    "{sender_name} throws a potato in {player_name}'s name. It’s what they would have wanted.",
    "{sender_name} builds a lava fountain to honor {player_name}. Half the base burns down.",
    "{sender_name} dedicates their next death to {player_name}. It happens almost immediately.",
    "{sender_name} names a creeper ‘{player_name}’ and lets it roam free. Bad idea."
  ]

  # A list of text to be broadcast when someone pays their respect.
  # This is a list without player. Supports MiniMessage.
  #
  # {sender_name} placeholder for the sender name
  pay-respect-no-player = [
    "{sender_name} holds a moment of silence, but only because they forgot what they were supposed to say.",
    "{sender_name} wonders if there's any loot left behind.",
    "{sender_name} plants a tree to remember... or maybe it's just a sapling. Hard to tell.",
    "{sender_name} puts a cake on the grave, but someone eats it before anyone can see."
  ]

  # A list of text to be broadcast when someone pays their respect.
  # This is a list for a sender itself. Supports MiniMessage.
  #
  # {sender_name} placeholder for the sender name
  pay-respect-self = [
    "{sender_name} offers condolences... to themselves. Awkward.",
    "{sender_name} sighs, 'Well, this is awkward...'",
    "{sender_name} thinks, 'Guess I can’t blame anyone but myself.'",
    "{sender_name} places a flower on their grave... somehow.",
    "{sender_name} yells, 'Who wrote <italic>that</italic> on my tombstone?!'",
    "{sender_name} groans, 'Being dead is so inconvenient...'",
    "{sender_name} wonders if ghosts get PTO.",
    "{sender_name} tries to haunt their own grave for dramatic effect.",
    "{sender_name} jokes, 'At least I don’t have to pay rent anymore.'",
    "{sender_name} smirks, 'I’d make a great ghost, honestly.'",
    "{sender_name} mutters, 'I died doing what I loved... being bad at Minecraft.'"
  ]
}

vote {
  # The supported vote links.
  links = [
    # "https://example.com"
  ]

  # The commands to execute when someone claims a vote.
  # {player_name} placeholder for the player name
  # {player_uuid} placeholder for the player unique id
  claim-commands = [
    "balance {player_name} add 400"
  ]

  # The free inventory space per 'claim-commands' reward procedure.
  claim-free-inventory-space = 0

  # The commands to execute when someone reaches a claimed vote rewards milestone.
  # {player_name} placeholder for the player name
  # {player_uuid} placeholder for the player unique id
  #
  # Format: key:integer = {space:(integer >= 0), [commands:string]}
  # key: the the vote milestone to reached
  # space: the space needed in the inventory to claim the reward
  # commands: the rewards expressed as commands to be executed upon reaching the milestone
  #
  # Keys will be sorted in descending order afterwards.
  #
  # Claimed vote rewards count will be checked for being a factor of a key.
  # The commands of the first match will be executed.
  claimed-rewards-extra-commands {
    # 100 = {1 = ["command1", "command2"]}
  }

  # The commands to execute when someone reaches a vote streak milestone.
  # {player_name} placeholder for the player name
  # {player_uuid} placeholder for the player unique id
  #
  # Format: key:integer = {space:(integer >= 0), [commands:string]}
  # key: the the vote milestone to reached
  # space: the space needed in the inventory to claim the reward
  # commands: the rewards expressed as commands to be executed upon reaching the milestone
  #
  # Keys will be sorted in descending order afterwards.
  #
  # Streak count will be checked for being a factor of a key.
  # The commands of the first match will be executed.
  streak-extra-reward-commands {
    # 100 = {1 = ["command1", "command2"]}
  }
}

discord {
  # The token for the discord bot.
  token = ""
  # The custom status of the discord bot. Leave empty for no status.
  status = ""

  # The intents for the discord bot, by their ids.
  # see: https://discord.com/developers/docs/events/gateway#list-of-intents
  intents = [
    1, # GUILD_MEMBERS
    9, # GUILD_MESSAGES
    15 # MESSAGE_CONTENT
  ]

  # The guild id of the discord bot.
  guild-id = 0
  # The game channel the discord bot should broadcast to.
  game-channel-id = 0
  # The admin log channel the discord bot should broadcast to.
  admin-log-channel-id = 0
  # The staff log channel the discord bot should broadcast to.
  staff-log-channel-id = 0
  # The id of the role given upon successful verification.
  verification-role-id = 0

  # The permissions of each role or user. The permissions of users have priority.
  #
  # Possible permissions are:
  # - ALL - All permissions.
  # - CHAT_MARKER - Enables use of "/chat-marker" command.
  # - LIST - Enables use of "/list" command.
  # - PREFIX - Enables use of "/prefix" command.
  # - RELOAD - Enables use of "/reload" command.
  # - RESTART - Enables use of "/restart" command.
  # - SHUTDOWN - Enables use of "/shutdown" command.
  # - STAFF_PREFIX - Enables use of "/staff-prefix" command.
  # - SYNC - Enables use of "/sync" command.
  # - UNSYNC - Enables use of "/chat-marker" command.
  permissions = {
    # 0000000000000000000 = [sync,unsync]
  }

  # The default color of the generated discord embeds.
  embed-color = "#000000"
  # The link to the discord server.
  link = "https://example.com"

  emojis {
    # The emoji displayed upon player death.
    death = ":skull:"
    # The emoji displayed upon player join.
    join = ":green_circle:"
    # The emoji displayed when players open crates.
    key = ":fireworks:"
    # The emoji displayed upon player leave.
    leave = ":red_circle:"
  }
}

# The commands blocked for muted users. Supports the start of the command line or regular expressions.
# Command line is always in lowercase.
mute-blocked-commands = [
  me # /me
]

# The advancement keys that should not be dispatched in the PlayerAchievementEvent.
# Supports regular expressions. Backslashes need to be escaped: '\' -> '\\'
# Currently only supported by Bukkit.
blacklisted-advancements = [
  "(adventure\\/)?root"
]

connection {
  # The amount of times we should try to reconnect upon losing connection.
  retries-upon-connection-loss = 10
  # The amount of times we should try to perform a task when running into a deadlock.
  retries-upon-deadlock = 20
}

# How the plugin should store data.
storage-method = "MariaDB"

# The following block defines the settings for remote database storage methods.
#
# - You don't need to touch any of the settings here if you're using a local storage method!
# - The connection detail options are shared between all remote storage types.
data {
  # Define the address and port for the database.
  # - The standard DB engine port is used by default
  #   (MySQL = 3306)
  # - Specify as "host:port" if differs
  address = "localhost"

  # The name of the database to store DirtCore data in.
  # - This must be created already.
  database = "dirtcore"

  # Credentials for the database.
  username = "root"
  password = ""

  # These settings apply to the MySQL connection pool.
  # - The default values will be suitable for the majority of users.
  # - Do not change these settings unless you know what you're doing!
  pool-settings {
    pool-size = 10

    # Sets the maximum size of the MySQL connection pool.
    # - Basically this value will determine the maximum number of actual
    #   connections to the database backend.
    # - More information about determining the size of connection pools can be found here:
    #   https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
    maximum-pool-size = 10

    # Sets the minimum number of idle connections that the pool will try to maintain.
    # - For maximum performance and responsiveness to spike demands, it is recommended to not set
    #   this value and instead allow the pool to act as a fixed size connection pool.
    #   (set this value to the same as 'maximum-pool-size')
    minimum-idle = 10

    # This setting controls the maximum lifetime of a connection in the pool in milliseconds.
    # - The value should be at least 30 seconds less than any database or infrastructure imposed
    #   connection time limit.
    maximum-lifetime = 1800000 # 30 minutes

    # This setting controls how frequently the pool will 'ping' a connection in order to prevent it
    # from being timed out by the database or network infrastructure, measured in milliseconds.
    # - The value should be less than maximum-lifetime and greater than 30000 (30 seconds).
    # - Setting the value to zero will disable the keepalive functionality.
    keepalive-time = 0

    # This setting controls the maximum number of milliseconds that the plugin will wait for a
    # connection from the pool, before timing out.
    connection-timeout = 5000 # 5 seconds

    # This setting allows you to define extra properties for connections.
    #
    # By default, the following options are set to enable utf8 encoding. (you may need to remove
    # these if you are using PostgreSQL)
    #   useUnicode = true
    #   characterEncoding = "utf8"
    #
    # You can also use this section to disable SSL connections, by uncommenting the 'useSSL' and
    # 'verifyServerCertificate' options below.
    properties {
      useUnicode = true
      characterEncoding = "utf8"
      #useSSL: false
      #verifyServerCertificate: false
    }
  }

  # The prefix for all DirtCore SQL tables.
  #
  # - This only applies for remote SQL storage types (MySQL, MariaDB, etc).
  # - Change this if you want to use different tables for different servers.
  table-prefix = "dirtcore_"
}
